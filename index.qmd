---
title: "A Generative Model for Time and Frequency Domain Parameters"
subtitle: "Two Sides from the Same Coin?"
date-modified: today
execute: 
  echo: false
author: 
  - name: "Matías Castillo-Aguilar"
    email: m99castillo@gmail.com
    orcid: 0000-0001-7291-247X
format: 
  html: 
    fig-format: svg
    title-block-banner: true
    title-block-style: manuscript
    toc: true
    toc-location: right
  pdf: 
    fig-format: pdf
    fig-dpi: 500
    documentclass: article
fig-width: 8
fig-height: 6
editor_options: 
  chunk_output_type: console
---

## Introduction

[...].

```{r}
#| include: false
library(ggplot2)
library(data.table)
library(brms)
library(tidybayes)
library(rstan)

theme_set(
  new = theme_classic(base_size = 14) +
    theme(legend.position = "bottom")
)
```

# Methods

## Model formulation

We consider a discrete set of time points $\{t_i\}_{i=1}^N$ at which the R–R interval (RRi) signal is observed. The objective is to represent the RRi series as a superposition of a smoothly varying baseline component, a time-dependent amplitude of structured variability, and a convex combination of spectral oscillators at physiologically defined frequency bands. This model is formally defined in @eq-big-model.

$$
\mathrm{RRi}(t_i)
= \underbrace{\mathrm{RR}(t_i)}_{\substack{\text{baseline heart period}}}
+
\underbrace{A(t_i)}_{\substack{\text{total modulation}\\\text{amplitude}}}
\times
\underbrace{\sum_{j=1}^{J} p_j(t_i) \cdot S_j(t_i)}_{\substack{\text{spectral oscillators}\\\text{weighted by proportions}}}
+ \varepsilon_i
$${#eq-big-model}

Here, $\mathrm{RR}(t_i)$ denotes the gross RRi trajectory. $\mathrm{A}(t_i)$ correspond to the total signal amplitude. Contained within the signal amplitude, the spectral components composed of $j$ bands are found. Thus, $j=1,2,3$ index the very-low-frequency (VLF), low-frequency (LF), and high-frequency (HF) bands, respectively, where the function $S_j(t_i)$ is the normalized, multi-sine-wave signal containing each frequency band. Finally, $p_j(t_i)$ is the time-dependent proportion for frequency band $j$ with respect to the total signal amplitude. Residual, unstructured variability is captured by $\varepsilon_i \sim \mathcal{N}(0, \sigma^2)$. The explicit time dependency of the functions $\mathrm{RR}(t_i)$, $\mathrm{A}(t_i)$, $S_j(t_i)$, and $p_j(t_i)$ obviates the need for opaque sliding-window decompositions, thus facilitating the simultaneous modeling of both time-domain and frequency-domain phenomena.

### Baseline heart period: $\mathrm{RR}(t_i)$

The $\mathrm{RR}(t_i)$ component quantifies the gross, underlying variations in the mean R–R interval. These fluctuations arise from short-term physiological regulatory processes, including changes in metabolic and cardiovascular demand, and shifts in tonic autonomic drive. This component can be parameterized effectively using smooth, low-dimensional functions that yield interpretable "onset" and "recovery" parameters. A double-logistic function, as presented in @eq-rri-vs-time-model, is particularly well-suited for this purpose.

$$
\mathrm{RR}(t_i) =
\underbrace{\alpha_r}_{\substack{\text{Resting RRi}}}
-
\underbrace{\beta_r \cdot \mathcal{D}_{1}(t_i)}_{\substack{\text{Exercise-induced}\\\text{RRi drop}}}
+
\underbrace{c_r \beta_r \cdot \mathcal{D}_{2}(t_i)}_{\substack{\text{Post-exercise}\\\text{RRi recovery}}}
$${#eq-rri-vs-time-model}

In this formulation, $\alpha_r$ represents the baseline heart period, which can be interpreted as the tonic vagal level. The parameter $\beta_r$ signifies the magnitude of the exercise-induced decline in RRi, meanwhile the fractional recovery amplitude is denoted by $c$. The functions $\mathcal{D}_{1,2}(t_i)$ correspond to the logistic components described in @eq-logistic-components

$$
\begin{aligned}
\mathcal{D}_{1}(t_i) &= (1+ e^{-\lambda (t_i - \tau)})^{-1} \\
\mathcal{D}_{2}(t_i) &= (1+ e^{-\phi (t_i - \tau - \delta)})^{-1}
\end{aligned}
$${#eq-logistic-components}

Where the rate constant $\lambda$ governs the initial decrease, with its inflection point occurring at time $\tau$. The parameter $\phi$ represents the recovery rate. Finally, $\delta$ quantifies the temporal offset between the decline and recovery phases.

This specific formulation, previously validated by Castillo-Aguilar et al. (2025), directly estimates physiologically salient time points and magnitudes. This facilitates enhanced mechanistic interpretation and improved comparability across different studies.

### Structured Variability Amplitude: $A(t_i)$

In this generative framework, $A(t_i)$ represents a time-varying modulation amplitude that governs the instantaneous magnitude of rhythmic variability, thereby generalizing the conventional notion of SDNN (the standard deviation of normal-to-normal intervals) to a dynamic quantity. By explicitly modeling $\mathrm{A}(t_i)$ separately from the band-relative weights $p_j(t_i)$, the model effectively isolates the overall autonomic "strength" or magnitude of variability from its specific spectral composition. This separation allows for a more nuanced understanding of how total variability and its distribution across frequency bands evolve over time.

Both the mean R-R interval, $\mathrm{RR}(t_i)$, and the total amplitude of the signal, $\mathrm{A}(t_i)$, employ the same double-logistic functional form, as defined in @eq-logistic-components. This consistent functional specification ensures that the interpretation of associated parameters remains coherent across both the mean heart rate and variability components. This parsimonious approach facilitates a more integrated and interpretable assessment of autonomic modulation.

When simulating an RRi series such that its structured variability precisely follows a target SDNN trajectory, it is imperative to ensure that the internal model amplitude, $A(t_i)$, aligns with the prescribed SDNN as a function of time, denoted $\mathrm{SDNN}(t_i)$. The structured variability component is given by the composite signal $x(t_i) = A(t_i)\sum_{j=1}^J p_j(t_i) S_j(t_i)$.

The instantaneous variance of this signal can be derived from its components. By definition, the spectral oscillators $S_j(t_i)$ are constructed to be uncorrelated (due to their independent random phases) and are each normalized to have a variance of one (i.e., $\mathrm{Var}[S_j(t_i)] = 1$). Consequently, the variance of the composite signal is $\mathrm{Var}[x(t_i)] = A(t_i)^2 \sum_{j=1}^J p_j(t_i)^2$.

To ensure the standard deviation of the structured variability matches the target trajectory, we set $\sqrt{\mathrm{Var}[x(t_i)]} = \mathrm{SDNN}(t_i)$. Solving for $A(t_i)$ yields the precise inversion expressed in @eq-sdnn-conversion.

$$
A(t_i) = \frac{\mathrm{SDNN}(t_i)}{\sqrt{\sum_{j=1}^J p_j(t_i)^2}}
$${#eq-sdnn-conversion}

Where $\mathrm{SDNN}(t_i)$ is further modeled as defined in @eq_sdnn.

$$
\mathrm{SDNN}(t_i) =
\underbrace{\alpha_s}_{\substack{\text{Resting SDNN}}}
-
\underbrace{\beta_s \cdot \mathcal{D}_{1}(t_i)}_{\substack{\text{Exercise-induced}\\\text{SDNN drop}}}
+
\underbrace{c_s \beta_s \cdot \mathcal{D}_{2}(t_i)}_{\substack{\text{Post-exercise}\\\text{SDNN recovery}}}
$${#eq_sdnn}

Where the new parameters $\alpha_s$, $\beta_s$ and $c_s$ correspond to the resting, exercise-induced drop and post-exercise transient states of SDNN, respectively.

This inversion is crucial in the simulation context. It guarantees that when the RRi data is subsequently modeled, for example as $\mathrm{RRi}(t_i) \sim \mathcal{N}(\mu(t_i), \sigma(t_i))$, the estimated residual standard deviation ($\sigma(t_i)$) accurately recovers the intended SDNN trajectory. In other words, the oscillatory amplitude is dynamically scaled such that the total variability profile of the simulated R-R intervals faithfully matches the desired physiological observations. A further advantage of employing the same double-logistic template for both $\mathrm{RR}(t_i)$ and $\mathrm{SDNN}(t_i)$ through $\mathcal{D}_{1,2}(t_i)$ is the ability to share and biologically interpret parameters, such as rise rates and inflection times, across both mean heart rate and variability. This yields a parsimonious yet mechanistically rich model of autonomic modulation, enabling a consistent interpretation of dynamic changes in both central tendency and dispersion of R-R intervals.

### Spectral components

#### Frequency band proportion

The instantaneous proportions of the total oscillatory amplitude attributed to each frequency band is denoted by $p_j(t)$. The main constraints are $0 \le p_j(t)\le1$ and $\sum_j p_j(t)=1$. This behavior is controlled by a single master function $C(t_i)$, with an auxiliary parameter to introduce asymmetry in the response of the different bands. This master function is defined according to @eq-master-freq-prop.

$$
C(t_i) =
\underbrace{\mathcal{D}_{1}(t_i)}_{\substack{\text{Perturbation}}}
-
\underbrace{c_c \cdot \mathcal{D}_{2}(t_i)}_{\substack{\text{Recovery}}}
$${#eq-master-freq-prop}

This single double logistic function, $C(t_i)$, acts as the master controller, representing a transition from a baseline physiological state ($C(t_i) = 0$) to a perturbed state ($C(t_i) = 1$), whereas $c_c$ controls de recovery proportion, assuming a potentially incomplete recovery is plausible. We can take advantage of the formulation of our $C(t_i)$ function to model the transition between resting and perturbed states by parameterizing $p_j(t_i)$ according to @eq-pj-using-ct.

$$
p_j(t_i) = (1 - C(t_i)) \cdot \vec\pi_{base} + C(t_i) \cdot \vec\pi_{pert}
$${#eq-pj-using-ct}

Where $C(t_)$ is the master control function (double logistic) that goes from 0 to 1. $\vec\pi_{base}$ is the vector of proportions at rest ($C(t_i) = 0$), and $\vec\pi_{pert}$ is the vector of proportions during the perturbation ($C(t_i) = 1$). Each $\vec\pi$ vector, contain the state values of each frequency band $j$ and must satisfy the condition $\sum_{j=1}^J \pi_j = 1$. For example, a "rest" baseline might be HF-dominant, while a "stress" perturbation might be LF-dominant.

#### Multi-sine frequency component

Each major frequency band $j$ is not a single sine wave but a superposition of $N_j$ minor sine waves, creating a realistic spectral texture, as denoted in @eq-multi-sine-fun.

$$
S_j(t_i) = Q_j \sum_{k=1}^K a_{j,k} \sin(2 \pi f_{j,k} t_i + u_{j,k})
$${#eq-multi-sine-fun}

Here, $Q_j$ is a normalization constant such that the variance of each signal $S_j(t_i)$ is 1. This ensures the proportions $p_j(t_i)$ correctly represent the power distribution. The frequencies of the minor waves $f_{j,k}$ are sampled from the standard ranges for each band. The random phase $u_{j,k}$ is sampled from the range $[0,2\pi]$, to ensure the resulting signal is not artificially periodic. The amplitudes of each minor sine wave $a_{j,k}$, follows a power-law distribution. The amplitudes of the minor sine waves $a_{j,k}$, whose distribution is expressed a function of its frequency $f_{j,k}$ and a spectral exponent parameter $b/2$, denoted in @eq-a-k-freq.

$$
a_{j,k} \propto f_{j,k}^{-b/2}
$${#eq-a-k-freq}

Here, a parameter $b = 0$ would denote that all amplitudes $a_{j,k}$ within the band are equal, whereas $b > 0$ would mean that lower frequencies within the band $j$ have higher amplitudes, a common feature in biological systems. The exponent is $b/2$ because signal power is proportional to amplitude squared ($P(f) \propto a^2(f)$).

## Simulating R-R interval data

To demonstrate the practical application of the proposed generative framework, we will simulate an R-R interval time series under controlled, physiologically plausible conditions. This process begins by establishing constant baseline proportions for the three canonical frequency bands: high-frequency (HF), low-frequency (LF), and very-low-frequency (VLF). Subsequently, we introduce temporal dynamics into both the mean R-R interval and its variability envelope.

### Frequency band contribution

Initially, we establish equal contributions from each frequency band, setting each proportion to one-third. This represents a neutral starting point, ensuring no single band is presumed to dominate the overall spectral composition:

$$
\begin{aligned}
p_\mathrm{HF} &\leftarrow 0.\overline{333} \\
p_\mathrm{LF} &\leftarrow 0.\overline{333} \\
p_\mathrm{VLF} &\leftarrow 0.\overline{333}
\end{aligned}
$$

```{r}
params <- data.table(
  p_hf = 1/3,
  p_lf = 1/3,
  p_vlf = 1/3
)
```

These assignments for $p_\mathrm{HF}$, $p_\mathrm{LF}$, and $p_\mathrm{VLF}$ represent the constant fractional weights of the HF, LF, and VLF components, respectively. This uniform initialization provides a balanced baseline from which subsequent temporal modulations will evolve, facilitating clear attribution of dynamic changes to the logistic-driven processes described later.

### Components for sine functions

Next, we assign central frequencies $f_j$ for each sinusoidal oscillator based on established HRV spectral ranges. Selecting values at the midpoint of each band ensures that our simulated oscillations reside within physiologically validated domains:

| Band | Frequency range (Hz) |
| :--: | :------------------: |
| HF | 0.15–0.40 |
| LF | 0.04–0.15 |
| VLF | 0.003–0.04 |

```{r}
params <- within(params, {
  f_hf <- 0.25
  f_lf <- 0.10
  f_vlf <- 0.02
})
```

The approximated frequency for each band is set to the midpoint of its range: $f_\mathrm{HF} \approx 0.25$, $f_\mathrm{LF} \approx 0.10$, and $f_\mathrm{VLF} \approx 0.02$. For the random phase parameter $\phi_j$, we will draw them from $\phi_j \sim \mathcal{U}(0, 2 \pi)$. This assumption of out-phase oscillations at simulation onset allows for more realism of the resultant beat-to-beat variability.

```{r}
set.seed(1234)
params <- within(params, {
  phi_hf <- runif(n = 1, 0, 2*pi)
  phi_lf <- runif(n = 1, 0, 2*pi)
  phi_vlf <- runif(n = 1, 0, 2*pi)
})
```

### Parameters for $\mathrm{RR}(t)$ and $\mathrm{SDNN}(t)$

Subsequently, temporal modulation of both the mean R-R interval and its standard deviation (i.e., SDNN) is incorporated using coupled double-logistic functions, consistent with the parameterization described by Castillo-Aguilar et al. (2025). The parameters governing the mean R-R trajectory are defined as follows:

| Parameter | Value | Meaning |
| :-------: | :---: | :-----: |
| $\alpha_\mathrm{RR}$ | 800 | Baseline RR |
| $\beta_\mathrm{RR}$ | 300 | RR drop |
| $c_\mathrm{RR}$ | 0.80 | Recovery proportion |
| $\lambda_\mathrm{RR}$ | 3.0 | Drop rate |
| $\phi_\mathrm{RR}$ | 2.0 | Recovery rate |
| $\tau_\mathrm{RR}$ | 6.0 | Drop time |
| $\delta_\mathrm{RR}$ | 3.0 | Drop duration |

```{r}
params <- within(params, {
  alpha_rr <- 800 ## Resting vagal tone
  beta_rr <- 300 ## Exercise induced drop
  c_rr <- 0.8 ## Post-exercise recovery
  lambda_rr <- 3 ## Rate of decay
  phi_rr <- 2 ## Rate of recovery
  tau_rr <- 6 ## When the drop will occur
  delta_rr <- 3 ## How long will exercise take
})
```

These parameters establish a baseline R-R interval of 800 ms, a transient decrease of 300 ms upon exercise onset, and an 80% recovery over a subsequent window, with precisely defined rates and timing.

An analogous parameter set governs the time course of SDNN:

| Parameter | Value | Meaning |
| :-------: | :---: | :-----: |
| $\alpha_\mathrm{SDNN}$ | 30 | Baseline SDNN |
| $\beta_\mathrm{SDNN}$ | 20 | SDNN drop |
| $c_\mathrm{SDNN}$ | 1.20 | Recovery proportion |
| $\lambda_\mathrm{SDNN}$ | 2.0 | Drop rate |
| $\phi_\mathrm{SDNN}$ | 2.0 | Recovery rate |
| $\tau_\mathrm{SDNN}$ | 6.0 | Drop time |
| $\delta_\mathrm{SDNN}$ | 3.0 | Drop duration |

```{r}
params <- within(params, {
  alpha_sdnn <- 30 ## Resting SDNN
  beta_sdnn <- 20 ## Exercise induced drop in SDNN
  c_sdnn <- 1.2 ## Post-exercise recovery in SDNN
  lambda_sdnn <- 2 ## Rate of decay in SDNN
  phi_sdnn <- 2 ## Rate of recovery in SDNN
  tau_sdnn <- 6 ## When the drop will occur
  delta_sdnn <- 3 ## How long will exercise take
})
```

Here, resting variability commences at 30 ms, transiently decreases by 20 ms with exercise, and subsequently overshoots the baseline by 20% during the recovery phase, thereby reflecting dynamic autonomic modulation. This precise control over the SDNN trajectory, coupled with the time-varying spectral proportions discussed previously, is critical for accurately simulating realistic R-R interval dynamics.

```{r}
sim <- data.table(
  t = seq(0.005, 15, 0.005)
)
```

```{r}
with(params, {
  ## RR(t)
  sim[, `:=`(
    rr_t = 
      alpha_rr -
      beta_rr / (1 + exp(-lambda_rr * (t - tau_rr))) +
      (c_rr * beta_rr) / (1 + exp(-phi_rr * (t - tau_rr - delta_rr)))
  )]
  ## SDNN(t)
  sim[, `:=`(
    sdnn_t =
      alpha_sdnn -
      beta_sdnn / (1 + exp(-lambda_sdnn * (t - tau_sdnn))) +
      (c_sdnn * beta_sdnn) / (1 + exp(-phi_sdnn * (t - tau_sdnn - delta_sdnn)))
  )]
  ## A(t) => Amplitude
  sim[, `:=`(
    A_t = sdnn_t * sqrt(2 / (p_vlf^2 + p_lf^2 + p_hf^2))
  )]
})
```

A high-resolution time vector is defined, spanning from 0.01 min to 15 min in 0.01 min increments, ensuring fine temporal granularity for the simulation. Using these specifications, the mean R-R interval at each time point is computed via the double-logistic form previously described. This generates a time series that smoothly transitions from baseline to nadir and back toward recovery, effectively capturing the characteristic heart period modulation induced by exercise. The same generative process is applied to SDNN fluctuations over time, utilizing an identical functional form as for the mean R-R interval. This dynamic relationship is depicted in @fig-logistic-rr-sdnn.

```{r}
#| out-width: 100%
#| fig-height: 8
#| column: page-left
#| label: fig-logistic-rr-sdnn
#| fig-cap: "Mean R-R ($\\mathrm{RR}(t)$) and SDNN ($\\mathrm{SDNN}(t)$) as a function of time, illustrating a resting state, exercise-induced drop, and post-exercise recovery kinetics. This behavior is controlled by the coupled logistic function described."

`names<-`(sim, c("t", "RR(t)", "A(t)", "SDNN(t)")) |> 
  melt(id.vars = c("t"), measure.vars = c("RR(t)", "SDNN(t)")) |> 
  `names<-`(c("Time", "Component", "Value")) |> 
  ggplot(aes(Time, Value)) + 
  facet_wrap(~ Component, nrow = 2, scales = "free_y") +
  geom_vline(xintercept = c(6,9), linetype = 2) +
  geom_text(data = data.frame(
    Component = c("RR(t)","RR(t)","RR(t)","SDNN(t)","SDNN(t)","SDNN(t)"),
    label = c("Rest", "Exercise", "Recovery","Rest", "Exercise", "Recovery"),
    Value = c(625,625,625,20,20,20),
    Time = c(4.5,7.5,10.5,4.5,7.5,10.5)
  ), aes(label = label)) +
  geom_line(aes(color = Component), linewidth = 1, show.legend = FALSE) +
  scale_color_manual(values = c("darkblue", "darkred")) +
  scale_y_continuous(expand = c(0.2,0)) +
  labs(x = "Time (min)", y = "Value",
       title = "Mean R-R Interval and SDNN as a Function of Time",
       subtitle = "Described as a Coupled Logistic Function")
```

The $\mathrm{SDNN}(t)$ curve represents the width around the main R-R interval signal. This can be re-visualized as a band of varying width around the mean R-R interval signal, as depicted in @fig-meanrr-sdnn-time.

```{r}
#| out-width: 100%
#| column: page-left
#| label: fig-meanrr-sdnn-time
#| fig-cap: "Mean R-R and SDNN as a function of time, where SDNN is depicted as a varying amplitude band around mean R-R, representing fluctuations in HRV."

ggplot(sim, aes(x = t)) +
  geom_line(aes(y = rr_t), color = "darkred", linewidth = 1) +
  geom_line(aes(y = rr_t + sdnn_t), linetype = 2) +
  geom_line(aes(y = rr_t - sdnn_t), linetype = 2) +
  labs(x = "Time (min)", y = "R-R interval (ms)",
       title = "Mean R-R Interval and SDNN as a Function of Time",
       subtitle = "Showed as Varying Mean R-R and Amplitude Bands")
```

```{r}
with(params, {
  sim[, `:=`(
    sine_hf = sin(x = 2*pi*f_hf*(t * 60) + phi_hf) * p_hf,
    sine_lf = sin(x = 2*pi*f_lf*(t * 60) + phi_lf) * p_lf,
    sine_vlf = sin(x = 2*pi*f_vlf*(t * 60) + phi_vlf) * p_vlf
  )]
})
```

The amplitude of this band, determined by $\mathrm{SDNN}(t)$, demonstrably changes over time. This variation is directly linked to autonomic modulation, underscoring its inherently dynamic nature. It is crucial to recognize that the width of this amplitude band serves as the container for fluctuations originating from the frequency domains.

### Integration of frequency-domain components

Frequency domains, which constitute the segment of the R-R interval signal composed of periodic waves at different frequencies, are the elemental constituents of the signal's amplitude. Consequently, the overall amplitude is formed by the HF, LF, and VLF components, not necessarily in equal proportions. A fundamental assumption prevalent in most spectral decomposition analyses is that the proportional contribution of different frequency bands remains constant over time. This implies that the proportion of the amplitude band described by HF, LF, or VLF does not fluctuate temporally. However, this premise is fundamentally flawed because the autonomic nervous system is a known dynamic system, rendering assumptions of static states physiologically unsound. 

This dynamic process is further depicted by the @eq-sine-components, with the fundamental condition $\sum_{j=1}^J p_j(t_i) \sin\bigl(2\pi f_j t_i + \phi_j\bigr) = 1$ to be constrained within the limits of $\mathrm{SDNN}(t)$.

$$
\sum_{j=1}^{3}
\underbrace{p_j(t_i)}_{\substack{\text{Time-evolving}\\\text{proportion}}}\,
\underbrace{\sin\bigl(2\pi f_j t_i + \phi_j\bigr)}_{\substack{\text{Wave function}}}
$${#eq-sine-components}

A reference figure illustrating isolated frequency components as a function of time portrayed in @fig-isolated-freq-comp.

```{r}
#| out-width: 100%
#| column: page-left
#| label: fig-isolated-freq-comp
#| fig-cap: "Isolated high, low, and very low frequency components as a function of time during the first 4 minutes. Each frequency band is normalized by its relative contribution factor $p_j(t)$ to the amplitude band $\\mathrm{SDNN}(t)$."

sim[1:800, .(t, 
        "HF(t)" = sine_hf,
        "LF(t)" = sine_lf,
        "VLF(t)" = sine_vlf)] |> 
  melt(id.vars = "t", 
     measure.vars = c("HF(t)", "LF(t)", "VLF(t)")) |> 
  ggplot(aes(t, value, col = variable)) + 
  facet_grid(rows = vars(variable), scales = "free_y") +
  geom_line(show.legend = FALSE) +
  scale_x_continuous(expand = c(0,0)) +
  scale_y_continuous(expand = c(0.4,0)) +
  scale_color_manual(values = c("#06F","#F60","#CC0")) +
  labs(x = "Time (min)", y = "Normalized Units",
       title = "Isolated Frequency Components",
       subtitle = " From R-R Signal of the first 4 minutes")
```

The previously simulated frequency bands can be combined with the overall mean R-R trend as a function of time, yielding a more realistic representation of an R-R interval signal that integrates the influence of spectral components, as illustrated in @fig-true-rr-interval.

```{r}
#| out-width: 100%
#| fig-height: 10
#| column: page-left
#| label: fig-true-rr-interval
#| fig-cap: "True generated R-R interval signal with time and frequency components integrated under the same generative process. The top panel displays the true signal, and the bottom panel highlights the frequency bands as part of the overall generated signal. The dashed line represents the SDNN envelope around the R-R interval signal"

sim[, `:=`(
  rr_signal = rr_t + A_t * (sine_hf + sine_lf + sine_vlf)
)]

p1 <- ggplot(sim, aes(x = t)) +
  geom_line(aes(y = rr_signal)) +
  geom_line(aes(y = rr_t + sdnn_t), linetype = 2) +
  geom_line(aes(y = rr_t - sdnn_t), linetype = 2) +
  labs(x = "Time (min)", y = "R-R interval (ms)",
       title = "True R-R Interval Signal",
       subtitle = "With spectral components included")

p2 <- ggplot(sim, aes(x = t)) +
  geom_line(aes(y = rr_signal, color = "HF")) +
  geom_line(aes(y = rr_t + sdnn_t), linetype = 2) +
  geom_line(aes(y = rr_t - sdnn_t), linetype = 2) +
  geom_line(aes(y = rr_t + A_t * (sine_lf + sine_vlf), color = "LF")) +
  geom_line(aes(y = rr_t + A_t * (sine_vlf), color = "VLF")) +
  scale_color_manual(values = c("HF" = "#06F", "LF" = "#F60", "VLF" = "#FF0")) +
  labs(x = "Time (min)", y = "R-R interval (ms)",
       color = "Frequency Band")

ggpubr::ggarrange(p1, p2, ncol = 1, align = "v")
```

### Accounting for residual variability

Real-world data invariably contain random noise that cannot be explained by further decomposing the signal into frequency bands without risking overfitting the inherent noise in R-R interval data. Nevertheless, the proposed model is capable of discerning the true signal from this noise, effectively isolating the underlying parameters that accurately reproduce both time and frequency components within a single generative framework.

## Making frequency bands change

To enhance the realism of our simulated R-R interval data, we introduce temporal variations in the proportional contribution of each frequency band to the overall signal amplitude. This dynamic approach moves beyond static assumptions of spectral composition, reflecting the inherent non-stationarity of physiological systems. To achieve this, we again leverage the flexibility of the double-logistic function, applying it to model the time-varying proportions of VLF, LF, and HF components.

We employ a stick-breaking scheme, a type of hierarchical decomposition, for the proportion components, denoted as $p_j(t_i)$. This elegant approach simplifies the modeling process significantly. Instead of defining and constraining three independent proportion parameters ($p_\mathrm{VLF}$, $p_\mathrm{LF}$, and $p_\mathrm{HF}$), the stick-breaking method requires us to define only two latent variables. The first latent variable is the proportion of VLF ($p_\mathrm{VLF}$) relative to the overall signal amplitude. The second is the HF proportion of the non-VLF remainder, which inherently encompasses both the HF and LF frequency bands. This structure naturally enforces the constraint that all proportions sum to unity at any given time point.

Initially, we model the proportion of VLF ($p_\mathrm{VLF}$) using the same functional form as previously applied to $\mathrm{RR}(t)$ and $\mathrm{SDNN}(t)$, as defined in @eq-vlf-model from the "Spectral Composition via Stick-Breaking" section. This consistency in functional form ensures parsimony and leverages the established interpretability of the double-logistic parameters. The remaining frequency parameters, specifically those for the HF and LF frequency bands, are then assumed to constitute the non-VLF portion of the signal. Conceptually, this can be expressed as $1 - p_\mathrm{VLF} = p_\mathrm{HF} + p_\mathrm{LF}$. The following model parameter values were carefully selected to simulate realistic dynamics for $p_\mathrm{VLF}(t)$:

| Parameter | Value | Meaning |
| :-------: | :---: | :-----: |
| $\alpha_\mathrm{VLF}$ | 0.30 | Baseline proportion VLF |
| $\beta_\mathrm{VLF}$ | 0.30 | VLF proportion increase |
| $c_\mathrm{VLF}$ | 1.00 | Recovery proportion |
| $\lambda_\mathrm{VLF}$ | 2.0 | Drop rate |
| $\phi_\mathrm{VLF}$ | 1.0 | Recovery rate |
| $\tau_\mathrm{VLF}$ | 6.0 | Drop time |
| $\delta_\mathrm{VLF}$ | 3.0 | Drop duration |

```{r}
params <- within(params, {
  alpha_p_vlf <- 0.30 # start with a 30% of VLF
  beta_p_vlf <- 0.30 # then increase by 30% in-exercise
  c_p_vlf <- 1 # then it experiences 80% VLF recovery
  lambda_p_vlf <- 2 # arbitrary rate of increase
  phi_p_vlf <- 1 # arbitrary rate of decrease
  tau_p_vlf <- 6
  delta_p_vlf <- 3
})

with(params, {
  sim[, `:=`(
    p_vlf = alpha_p_vlf +
      beta_p_vlf / (1 + exp(-lambda_p_vlf * (t - tau_p_vlf))) -
      (c_p_vlf * beta_p_vlf) / (1 + exp(-phi_p_vlf * (t - tau_p_vlf - delta_p_vlf)))
  )]
})
```

These parameters dictate that the VLF contribution begins at a baseline of 30%, transiently increases by another 30% (reaching 60% VLF), and fully recovers, with specified rates and timings. This reflects scenarios where VLF activity might be transiently accentuated or suppressed.

Subsequently, we model the ratio of LF to HF within the non-VLF remainder, denoted as $r_\mathrm{LF/HF}(t)$, utilizing the functional form described in @eq-hf-lf-model from the "Spectral Composition via Stick-Breaking" section. The parameters for this component are provided below:

| Parameter | Value | Meaning |
| :-------: | :---: | :-----: |
| $\alpha_r$ | 0.60 | Baseline LF proportion |
| $\beta_r$ | 0.20 | LF proportion decrease |
| $c_r$ | 0.5 | Recovery proportion |
| $\lambda_r$ | 2.0 | Drop rate |
| $\phi_r$ | 1.0 | Recovery rate |
| $\tau_r$ | 6.0 | Drop time |
| $\delta_r$ | 6.0 | Drop duration |

```{r}
params <- within(params, {
  alpha_r_lf_hf <- 0.6 # start with a 60% of LF/HF ratio
  beta_r_lf_hf <- 0.2 # then decreases by 10% in-exercise
  c_r_lf_hf <- 0.5 # then it experiences 80% HF/LF recovery
  lambda_r_lf_hf <- 2 # arbitrary rate of increase
  phi_r_lf_hf <- 1 # arbitrary rate of decrease
  tau_r_lf_hf <- 6
  delta_r_lf_hf <- 6
})

with(params, {
  sim[, `:=`(
    r_lf_hf = alpha_r_lf_hf +
      beta_r_lf_hf / (1 + exp(-lambda_r_lf_hf * (t - tau_r_lf_hf))) -
      (c_r_lf_hf * beta_r_lf_hf) / (1 + exp(-phi_r_lf_hf * (t - tau_r_lf_hf - delta_r_lf_hf)))
  )]
})
```

```{r}
sim[, p_lf := (1 - p_vlf) * r_lf_hf]
sim[, p_hf := (1 - p_vlf) * (1 - r_lf_hf)]
```

```{r}
sim[, `:=`(
  A_t = sdnn_t * sqrt(2 / (p_vlf^2 + p_lf^2 + p_hf^2))
)]
```


These parameters indicate a baseline LF proportion (within the non-VLF part) of 60%, followed by a transient increase of 20% and a partial recovery. The distinct recovery proportion ($c_r = 0.5$) highlights that the LF/HF balance might not fully revert to its initial state, reflecting a sustained shift in autonomic balance. The choice of $\delta_r = 6.0$ also suggests a longer duration for the recovery of this ratio compared to the VLF proportion.

By allowing the frequency bands to fluctuate dynamically within the constraints of this hierarchical decomposition, our model gains the capacity to represent a wider array of autonomic realities observable in experimental settings. Traditional spectral analyses often assume static band contributions, which can mask critical time-varying physiological responses. Our approach, by contrast, explicitly models these temporal shifts, offering a more nuanced and biologically faithful representation of heart rate variability. Furthermore, the ability to visualize the change in the proportional contribution of each frequency band over time, as illustrated in @fig-stick-breaking, provides an intuitive understanding of these complex dynamics. This visualization allows researchers to directly observe how the relative importance of sympathetic, parasympathetic, and very-low-frequency modulations evolves during a given physiological challenge or recovery period.

```{r}
#| out-width: 100%
#| fig-width: 12
#| column: page-left
#| label: fig-stick-breaking
#| fig-cap: "Stick-breaking strategy for hierarchical decomposition of temporal-dependent latent variables contributing to the relative contribution of each frequency band, isolating the frequency band components using hierarchical decomposition. In the top-left panel, we first model the VLF and non-VLF parts. In the left panel, we then use the non-VLF part to describe the change in the LF part of the non-VLF part. In the right panel, we observed the final composition of each proportion as part of the whole frequency band."

p1_big <- ggplot(sim, aes(t, p_vlf)) +
  geom_area(fill = "#E6550D", linewidth = 1) +
  scale_y_continuous(labels = scales::label_percent(),
                     name = expression(italic(p)[VLF](t)),
                     n.breaks = 6, expand = c(0,0),
                     limits = c(0,1)) +
  scale_x_continuous(expand = c(0,0), labels = NULL, name = NULL,
                     breaks = NULL) +
  annotate(geom = "text", x = 7.5, y = 0.20, label = "VLF part", 
           cex = 4, fontface = "bold", color = "white") +
  annotate(geom = "text", x = 2.5, y = 0.8, label = "non-VLF part", 
           cex = 4, fontface = "bold") +
  labs(x = "Time (min)", 
       title = "Stick-Breaking Hierarchichal Decomposition")

p1_small <- ggplot(sim, aes(t, r_lf_hf)) +
  geom_area(fill = "#FDAE6B", linewidth = 1) +
  scale_y_continuous(labels = scales::label_percent(),
                     name = expression(italic(r)[LF/HF](t)),
                     limits = c(0,1), expand = c(0,0)) +
  scale_x_continuous(expand = c(0,0)) + 
  annotate(geom = "text", x = 7.5, y = 0.45, label = "LF",
           cex = 4, fontface = "bold", color = "white") +
  annotate(geom = "text", x = 7.5, y = 0.9, label = "HF", 
           cex = 4, fontface = "bold") +
  labs(x = NULL)

p1 <- p1_big + 
  annotation_custom(
    grob = ggplotGrob(p1_small),
    xmin = 5, xmax = 15,
    ymin = 0.55, ymax = 1
  )

p2 <- sim[, .(t, HF = p_hf, LF = p_lf, VLF = p_vlf)] |> 
  melt(id.vars = "t", measure.vars = c("HF","LF","VLF")) |> 
  ggplot(aes(t, value, fill = variable)) +
  geom_area(position = position_stack(), show.legend = FALSE) +
  scale_fill_manual(values = c("white", "#FDAE6B", "#E6550D")) +
  scale_x_continuous(expand = c(0,0), name = "Time (min)") +
  scale_y_continuous(expand = c(0,0), name = "Contribution Proportion",
                     labels = scales::label_percent()) +
  annotate("text", x = 7.5, y = 0.95, label = "HF", cex = 4, 
           fontface = "bold") +
  annotate("text", x = 7.5, y = 0.70, label = "LF", cex = 4, 
           color = "white", fontface = "bold") +
  annotate("text", x = 7.5, y = 0.20, label = "VLF", cex = 4, 
           color = "white", fontface = "bold") +
  labs(title = "Relative Contribution of Frequency Bands")

ggpubr::ggarrange(p1, p2, ncol = 2, align = "h", common.legend = TRUE)
```

After having simulated time-varying frequency band contributions to the signal amplitude, the next step is to integrate these dynamic spectral components into the overall observed R-R interval signal. This integration represents the culmination of our generative framework, allowing us to synthesize a realistic R-R signal that incorporates both non-stationary time-domain trends and fluctuating frequency-domain compositions. The resulting signal, depicted in @fig-observed-varying-freq, is a comprehensive representation of a continuous R-R signal recording, effectively capturing the interplay of signal and inherent noise.  This figure serves as a powerful demonstration of the model's ability to generate data that mirrors the complexity of real physiological measurements.

```{r}
#| out-width: 100%
#| fig-height: 10
#| column: page-left
#| label: fig-observed-varying-freq
#| fig-cap: "Observed and true R-R interval signal with time-varying spectral composition and band amplitudes, with frequency bands highlighted in the bottom panel."

with(params, {
  sim[, `:=`(
    ## Compute each sine wave again with the fluctuations from each band
    sine_hf = sin(x = 2*pi*f_hf*(t * 60) + phi_hf) * p_hf,
    sine_lf = sin(x = 2*pi*f_lf*(t * 60) + phi_lf) * p_lf,
    sine_vlf = sin(x = 2*pi*f_vlf*(t * 60) + phi_vlf) * p_vlf
  )]
})

## Recreate the RR signal vector
sim[, rr_signal := rr_t + A_t * (sine_hf + sine_lf + sine_vlf)]

p1 <- ggplot(sim, aes(x = t)) +
  geom_line(aes(y = rr_signal)) +
  scale_x_continuous(name = NULL, breaks = NULL, labels = NULL) +
  labs(x = "Time (min)", y = "R-R interval (ms)",
       title = "Observed and True R-R Interval Signal",
       subtitle = "With spectral components highlighted")

p2 <- ggplot(sim, aes(x = t)) +
  geom_line(aes(y = rr_t + sdnn_t), linetype = 2) +
  geom_line(aes(y = rr_t - sdnn_t), linetype = 2) +
  geom_line(aes(y = rr_signal, color = "HF")) +
  geom_line(aes(y = rr_t + A_t * (sine_lf + sine_vlf), color = "LF")) +
  geom_line(aes(y = rr_t + A_t * (sine_vlf), color = "VLF")) +
  scale_color_manual(values = c("HF" = "#06F", "LF" = "#F60", "VLF" = "#FF0")) +
  labs(x = "Time (min)", y = "R-R interval (ms)", color = "Frequency Band") +
  theme(legend.position = "bottom")

ggpubr::ggarrange(p1, p2, ncol = 1, align = "v", heights = c(8,9))
```

It is important to acknowledge that the subtle changes in the R-R signal stemming from the variations in the frequency bands may not be immediately apparent to the unaided eye in the overall R-R time series. These are often subtle modulations, embedded within the larger amplitude fluctuations governed by $\mathrm{RR}(t)$ and $\mathrm{SDNN}(t)$. However, their underlying presence is precisely what our model aims to capture and elucidate. This model represents a significant advancement, being among the first of its kind to accurately capture the intricate data generation process behind heart rate variability. Beyond merely simulating data, this framework possesses the critical capability of estimating the temporal fluctuations of a real physiological signal by robustly mimicking its underlying spectral components. This dual capacity for both generation and estimation positions our model as a powerful tool for advancing the understanding of autonomic cardiovascular regulation in both health and disease.

## Estimating the data generation process

After generating an R-R interval signal with time-varying frequency components with transient time-domain states, we will retrieve the data-generating parameters under a Bayesian framework. To do this, we will a three-step approach. 

First, we will recover the mean R-R interval signal, which corresponds to the gross temporal variations in the signal pattern. Then, we will remove the predicted mean R-R interval values from the signal. This will detrend the signal to then estimate temporal amplitude oscilations, capturing the overall SDNN trayectory. Finally, we will scale the detrended signal for the predicted SDNN, leaving a standardized detrended signal, only with residual frequency components. This remanent data will serve as the input data to estimate the temporal fluctuations in the relative contribution for each frequency band.

### Estimating $\mathrm{RR}(t)$



```{r}
if (!file.exists("models/rr_t_fit.rds")) {
  if (!file.exists("models/rr_t_model.stan.rds")) {
    rr_t_model <- stan_model(file = "models/rr_t_model.stan")
    saveRDS(rr_t_model, file = "models/rr_t_model.stan.rds")
  } else {
    rr_t_model <- readRDS("models/rr_t_model.stan.rds")
  }
  
  rr_t_fit <- sampling(
    object = rr_t_model,
    pars = c("alpha_rr","beta_rr","c_rr","lambda_rr","phi_rr",
             "tau_rr","delta_rr", "alpha_rr_r","beta_rr_r","c_rr_r",
             "lambda_rr_r","phi_rr_r","tau_rr_r","delta_rr_r"), 
    include = TRUE,
    data = list(N = length(sim$t), t = sim$t, 
                rr_observed = sim$rr_signal),
    iter = 10000, warmup = 5000, 
    chains = 4, cores = 4,
    seed = 1234
  )
  
  saveRDS(rr_t_fit, file = "models/rr_t_fit.rds")
} else {
  rr_t_fit <- readRDS(file = "models/rr_t_fit.rds")
}

rstan::check_hmc_diagnostics(rr_t_fit)
rstan::get_elapsed_time(rr_t_fit) |> 
  rowSums() |> 
  max() |> 
  (\(i) i/60)()

rr_t_posterior <- 
  rstan::extract(rr_t_fit) |> 
  as.data.table()

with(rr_t_posterior[, lapply(.SD, mean)], {
  sim[, rri_predicted := alpha_rr -
                     beta_rr / (1 + exp(-lambda_rr * (sim$t - tau_rr))) +
                     (c_rr * beta_rr) / (1 + exp(-phi_rr * (sim$t - tau_rr - delta_rr)))]
})

sim[, rri_resid := rr_signal - rri_predicted]
```

Estimamos curva rri del modelo y la comparamos con la original

```{r}
sim[, {
  plot(t, rr_t, type = "l", axes = FALSE, col = "#069", lwd = 2, ylim = c(400, 1000))
  axis(1); axis(2)
}]
  sim[, lines(t, rri_predicted, type = "l", col = "#900", lty = 2, lwd = 2)]
```

Computamos los residuos del modelo, que corresponden a SDNN y componentes de frecuencia

```{r}
sim[, {
  plot(t, rri_resid, type = "l", lwd = 1, col = "#069", 
       axes = FALSE, ylab = "RR(t)'s Residual", xlab = "Time (min)")
  axis(1);axis(2)
}]
```

### Estimating $\mathrm{SDNN}(t)$

Especificamos el modelo

```{r}
if (!file.exists("models/sdnn_t_fit.rds")) {
  if (!file.exists("models/sdnn_t_model.stan.rds")) {
    sdnn_t_model <- stan_model(file = "models/sdnn_t_model.stan")
    saveRDS(sdnn_t_model, file = "models/sdnn_t_model.stan.rds")
  } else {
    sdnn_t_model <- readRDS("models/sdnn_t_model.stan.rds")
  }
  
  sdnn_t_fit <- sampling(
    object = sdnn_t_model,
    pars = c("alpha_sdnn_r", "beta_sdnn_r", "c_sdnn_r", "lambda_sdnn_r", 
    "phi_sdnn_r", "tau_sdnn_r", "delta_sdnn_r", "alpha_sdnn", "beta_sdnn", 
    "c_sdnn", "lambda_sdnn", "phi_sdnn", "tau_sdnn", "delta_sdnn"), 
    include = TRUE,
    data = list(N = length(sim$t), t = sim$t, 
                rr_resid = sim$rri_resid,
                ),
    iter = 10000, warmup = 5000, 
    chains = 4, cores = 4,
    seed = 1234
  )
  saveRDS(sdnn_t_fit, file = "models/sdnn_t_fit.rds")
} else {
  sdnn_t_fit <- readRDS(file = "models/sdnn_t_fit.rds")
}

rstan::check_hmc_diagnostics(sdnn_t_fit)

sdnn_t_posterior <- 
  rstan::extract(sdnn_t_fit) |> 
  as.data.table()

with(sdnn_t_posterior[, lapply(.SD, mean)], {
  sim[, sdnn_predicted := 
        alpha_sdnn -
        beta_sdnn / (1 + exp(-lambda_sdnn * (sim$t - tau_sdnn))) +
        (c_sdnn * beta_sdnn) / (1 + exp(-phi_sdnn * (sim$t - tau_sdnn - delta_sdnn)))]
})

sim[, sdnn_resid := rri_resid/sdnn_predicted]
```

Estimamos curva sdnn del modelo y la comparamos con la original

```{r}
sim[, {
  plot(t, sdnn_t, type = "l", axes = FALSE, col = "#069", lwd = 2, ylim = c(0, 50))
  axis(1); axis(2)
}]
  sim[, lines(t, sdnn_predicted, type = "l", col = "#900", lty = 2, lwd = 2)]

sd(sim$sdnn_resid)

sim[, {
  plot(t, sdnn_resid, type = "l", col = "#069", axes = FALSE)
  axis(1);axis(2)
}]
```

### Estimating all spectral components at once

First using highly knowledgeable priors

```{r}
if (!file.exists("models/freq_t_fit.rds")) {
  if (!file.exists("models/freq_t_model.stan")) {
    freq_t_model <- stan_model(file = "models/freq_t_model.stan")
    saveRDS(freq_t_model, file = "models/freq_t_model.stan.rds")
  } else {
    freq_t_model <- readRDS(file = "models/freq_t_model.stan.rds")
  }
  freq_t_fit <- sampling(
      object = freq_t_model,
      pars = c("alpha_vlf","beta_vlf","c_vlf","lambda_vlf","phi_vlf",
               "tau_vlf","delta_vlf", 
               "alpha_ratio","beta_ratio","c_ratio","lambda_ratio",
               "phi_ratio","tau_ratio","delta_ratio",
               "a_vlf", "b_vlf", "a_lf", "b_lf", "a_hf", "b_hf"), 
      include = TRUE,
      data = list(N = length(sim$t), t = sim$t, 
                  sdnn_resid = sim$sdnn_resid),
      iter = 10000, warmup = 5000, 
      chains = 4, cores = 4,
      seed = 1234
  )
  saveRDS(freq_t_fit, file = "models/freq_t_fit.rds")
} else {
  freq_t_fit <- readRDS(file = "models/freq_t_fit.rds")
}

rstan::check_hmc_diagnostics(freq_t_fit)
## All check indicate propper convergence

rstan::get_elapsed_time(freq_t_fit) |> 
  rowSums() |> 
  max() |> 
  (\(i) i/60)()
## Model took ~9 minutes to run
```

```{r}
par(mfrow = c(2,1))

freq_t_posterior <- 
  extract(freq_t_fit) |> 
  as.data.table()

with(freq_t_posterior[, lapply(.SD, mean)], {
  p_vlf <- alpha_vlf +
    (beta_vlf - alpha_vlf) /
      (1 + exp(-lambda_vlf * (sim$t - tau_vlf))) -
    (c_vlf * (beta_vlf - alpha_vlf)) /
      (1 + exp(-phi_vlf * (sim$t - tau_vlf - delta_vlf)))

  r_lf_hf <- alpha_ratio +
    (beta_ratio - alpha_ratio) /
      (1 + exp(-lambda_ratio * (sim$t - tau_ratio))) -
    (c_ratio * (beta_ratio - alpha_ratio)) /
      (1 + exp(-phi_ratio * (sim$t - tau_ratio - delta_ratio)))

  p_lf <- (1 - p_vlf) * (r_lf_hf)
  p_hf <- (1 - p_vlf) * (1 - r_lf_hf)
  
  norm_factor <- sqrt( 2 / (p_hf * p_hf +
                            p_lf * p_lf +
                            p_vlf * p_vlf) )
  
  sine_vlf <- 
    p_vlf * ( a_vlf * sin(2 * pi * 0.02 * (sim$t * 60)) +
              b_vlf * cos(2 * pi * 0.02 * (sim$t * 60)) )
  sine_lf <- 
    p_lf * ( a_lf * sin(2 * pi * 0.10 * (sim$t * 60)) +
             b_lf * cos(2 * pi * 0.10 * (sim$t * 60)) )
  sine_hf <- 
    p_hf * ( a_hf * sin(2 * pi * 0.25 * (sim$t * 60)) +
             b_hf * cos(2 * pi * 0.25 * (sim$t * 60)) )
  
  plot(sim$t, sim$rri_predicted + 
         (sim$sdnn_predicted * norm_factor) * (
           sine_vlf + sine_lf + sine_hf
         ), type = "l", col = "#069",
       xlab = "Time (min)", ylab = "RRi (ms)", 
       main = "Predicted signal")
  data.table(t = sim$t, p_vlf, r_lf_hf, p_lf, p_hf, 
             norm_factor, sine_vlf, sine_lf, sine_hf)
})

plot(sim$t, sim$rr_signal, col = "#900", type = "l", 
     xlab = "Time (min)", ylab = "RRi (ms)", 
     main = "True signal")
```

### The same but without phase

```{r}
if (!file.exists("models/freq_simple_t_fit.rds")) {
  if (!file.exists("models/freq_simple_t_model.stan")) {
    freq_simple_t_model <- stan_model(file = "models/freq_simple_t_model.stan")
    saveRDS(freq_simple_t_model, file = "models/freq_simple_t_model.stan.rds")
  } else {
    freq_simple_t_model <- readRDS(file = "models/freq_simple_t_model.stan.rds")
  }
  freq_simple_t_fit <- sampling(
      object = freq_simple_t_model,
      pars = c("alpha_vlf","beta_vlf","c_vlf","lambda_vlf","phi_vlf",
               "tau_vlf","delta_vlf", 
               "alpha_ratio","beta_ratio","c_ratio","lambda_ratio",
               "phi_ratio","tau_ratio","delta_ratio", "sigma_freq"), 
      include = TRUE,
      data = list(N = length(sim$t), t = sim$t, 
                  sdnn_resid = sim$sdnn_resid),
      iter = 10000, warmup = 5000, 
      chains = 4, cores = 4,
      seed = 1234
  )
  saveRDS(freq_simple_t_fit, file = "models/freq_simple_t_fit.rds")
} else {
  freq_simple_t_fit <- readRDS(file = "models/freq_simple_t_fit.rds")
}

rstan::check_hmc_diagnostics(freq_simple_t_fit)
## All check indicate propper convergence

rstan::get_elapsed_time(freq_simple_t_fit) |> 
  rowSums() |> 
  max() |> 
  (\(i) i/60)()
## Model took ~2 minutes to run
```

```{r}
freq_simple_t_posterior <- 
  extract(freq_simple_t_fit) |> 
  as.data.table()

with(freq_simple_t_posterior[, lapply(.SD, mean)], {
  p_vlf <- alpha_vlf +
    (beta_vlf) /
      (1 + exp(-lambda_vlf * (sim$t - tau_vlf))) -
    (c_vlf * (beta_vlf)) /
      (1 + exp(-phi_vlf * (sim$t - tau_vlf - delta_vlf)))

  r_lf_hf <- alpha_ratio +
    (beta_ratio) /
      (1 + exp(-lambda_ratio * (sim$t - tau_ratio))) -
    (c_ratio * (beta_ratio)) /
      (1 + exp(-phi_ratio * (sim$t - tau_ratio - delta_ratio)))

  p_lf <- (1 - p_vlf) * (r_lf_hf)
  p_hf <- (1 - p_vlf) * (1 - r_lf_hf)
  
  norm_factor <- sqrt( 2 / (p_hf * p_hf +
                            p_lf * p_lf +
                            p_vlf * p_vlf) )
  
  sine_vlf <- 
    p_vlf * sin(2 * pi * 0.02 * (sim$t * 60))
  sine_lf <- 
    p_lf * sin(2 * pi * 0.10 * (sim$t * 60))
  sine_hf <- 
    p_hf * sin(2 * pi * 0.25 * (sim$t * 60))
  
  plot(sim$t, sim$rri_predicted + 
         (sim$sdnn_predicted * norm_factor) * (
           sine_vlf + sine_lf + sine_hf
         ), type = "l")
  data.table(t = sim$t, p_vlf, r_lf_hf, p_lf, p_hf, 
             norm_factor, sine_vlf, sine_lf, sine_hf)
})

lines(sim$t, sim$rr_signal, col = "red")
```


## Discussion

The generative model presented for R-R interval dynamics represents a substantial conceptual and methodological advancement in heart rate variability (HRV) analysis, explicitly addressing long-standing limitations within the field. Traditional approaches have consistently encountered an inherent compromise between temporal precision and frequency resolution in spectral techniques, alongside the predominantly descriptive nature of derived metrics that frequently obscure direct insight into underlying physiological mechanisms. Our novel parametric framework aims to transcend these limitations by providing a unified, time-varying representation of baseline heart period, overall variability amplitude, and spectral composition, thereby offering enhanced resolution, transparency, and clinical applicability. This integration into a single, comprehensive generative framework suggests a notable step towards overcoming these pervasive challenges.

A cornerstone of this model is its significant capacity to explicitly capture time-varying physiological processes. Unlike conventional fixed-window spectral analyses, which average activity over extended periods and thus inevitably blur transient autonomic events, our approach models each core component as a continuous function of time. The adoption of double-logistic functions for $\mathrm{RR}(t)$ and $\mathrm{SDNN}(t)$ allows for the precise characterization of dynamic changes, such as the onset and recovery kinetics observed during physiological challenges like exercise. This mathematical formulation enables the direct estimation of physiologically relevant indices, including surge onset times, peak amplitudes, and half-recovery durations, which are critical for understanding dynamic autonomic responses but are often obscured by aggregated metrics. For instance, the rapid vagal withdrawal or sympathetic surges occurring during orthostatic challenge or acute stressors, phenomena of substantial clinical relevance, may now be quantified without the analytical dilemma imposed by windowing techniques.

The model's innovative use of a two-stage stick-breaking decomposition for spectral proportions ($p_j(t)$) further distinguishes it from existing methodologies. This hierarchical approach intrinsically ensures that the proportional contributions of VLF, LF, and HF bands sum to unity at every time point, while simultaneously reducing the latent dimensionality of the system. By modeling the VLF proportion and then the HF-to-LF ratio within the remainder, the model accurately reflects an inherent biological hierarchy in autonomic control over heart rate variability. This contrasts with standard analytical practices that frequently reduce dynamic spectral information into aggregated, static indices like the LF/HF ratio, which can ambiguously represent genuine increases in one component, decreases in another, or simultaneous modulations of both. Our model, by contrast, provides instantaneous, interpretable estimates of each band's dynamic contribution, offering a clearer perspective into the evolving balance of autonomic nervous system activity.

The physiological interpretability of the model's parameters is a considerable advantage. Each parameter within the double-logistic and stick-breaking formulations directly corresponds to a specific aspect of autonomic regulation, such as baseline levels, magnitudes of change, and rates of onset and recovery. This level of direct mechanistic significance, transitioning from descriptive to mechanistic insights, is often less explicit in other advanced HRV analysis techniques, such as nonlinear measures or data-driven decompositions. While methods like entropy or fractal dimension quantify signal complexity, they do not directly map to specific autonomic pathways. Similarly, many machine learning models, despite their predictive power, often operate as opaque "black boxes" devoid of readily apparent mechanistic interpretability. Our generative framework, by contrast, provides a transparent mapping from statistical parameters to physiological constructs, potentially facilitating clearer mechanistic inference and enhancing inter-study comparability.

A crucial implication of this unified generative paradigm is its ability to circumvent the time-frequency trade-off, a persistent methodological challenge in HRV analysis. By explicitly representing each latent component as a continuous, time-varying function, the model estimates instantaneous band-specific power without recourse to arbitrary smoothing or the use of sliding windows, which can temporally blur or obscure rapid sympathetic or parasympathetic modulations. This capability is achieved through the continuous, parametric representation of each component, supporting a high-resolution characterization of autonomic events. This approach may be particularly valuable for detecting abrupt physiological shifts that are often critical for diagnosis and intervention. The model's capacity to deliver precise, transparent, and mechanistically grounded insights into autonomic cardiovascular regulation represents a notable advancement in the field.

Furthermore, the generative nature of our model offers distinct capabilities beyond mere analysis. It can simulate synthetic RRI trajectories under controlled autonomic scenarios, a feature valuable for rigorous power analyses, hypothesis testing, and educational demonstrations. This simulation capability also allows for a deeper understanding of how time-varying frequency band contributions manifest in the overall RRI signal. While these spectral variations might be subtle and not immediately apparent to the unaided eye in a raw RRI time series, their underlying presence is precisely what the model is designed to capture and elucidate. This model represents a promising advancement, aiming to accurately capture the intricate data generation process behind heart rate variability.

Beyond simulation, the model possesses the capability of estimating the temporal fluctuations of a real physiological signal by robustly mimicking its underlying spectral components. This dual capacity for both generation and estimation positions our model as a potentially valuable tool for advancing the understanding of autonomic cardiovascular regulation in both health and disease. In basic research, it could facilitate mechanistic investigations into autonomic regulation, enabling quantitative assessment of coupling between respiratory patterns and heart rate, or precise delineation of recovery kinetics following physical exertion. Clinically, it may offer refined biomarkers for conditions such as dysautonomia, heart failure, and stress-related disorders, thereby potentially enhancing both diagnostic sensitivity and prognostic specificity. For wearable technology and biofeedback applications, the model could support real-time monitoring of autonomic state, which may guide adaptive interventions tailored to instantaneous physiological need. In essence, this formalized, physiologically coherent generative model of HRV aims to reconcile temporal and spectral analysis within a single, interpretable framework. By embedding parametric latent drives for baseline heart period, variability amplitude, and spectral composition, it is anticipated to contribute significantly to HRV research, fostering a transition from descriptive heuristics towards a quantitatively precise science of autonomic cardiovascular dynamics.

### Limitations

Despite its significant advancements, the current generative model possesses certain limitations that warrant consideration. The primary limitation stems from its parametric nature, which relies on a predefined functional form for describing the temporal dynamics of baseline heart period, variability amplitude, and spectral proportions. While the double-logistic function offers considerable flexibility and physiological interpretability, it may not universally capture all conceivable patterns of autonomic modulation, particularly those exhibiting highly irregular or non-monotonic behavior not well approximated by sigmoidal curves. The model also assumes a fixed number of frequency bands and their approximate central frequencies, which might not account for individual variability in spectral composition or shifts in resonant frequencies under extreme physiological states. Furthermore, the current implementation does not explicitly model or differentiate between the precise neural pathways contributing to each frequency band, relying instead on the established physiological interpretation of VLF, LF, and HF components. The generalizability of the proposed parameterization may also be influenced by the specific population and experimental conditions under which the model is applied and validated.

### Future Research

Future research endeavors will focus on expanding the model's capabilities to address its current limitations and unlock further insights into autonomic regulation. One key direction involves exploring more flexible, non-parametric or semi-parametric extensions to the functional forms, allowing for a broader range of temporal dynamics to be accurately captured without sacrificing interpretability where possible. This could include incorporating basis functions or Gaussian processes to model more complex RRI trajectories and spectral shifts. Investigations into data-driven approaches for identifying optimal frequency band definitions and their potential time-varying characteristics are also warranted, moving beyond fixed ranges to account for individual physiological differences. Integrating biophysically detailed models of neural autonomic control into the generative framework represents another promising avenue, which could allow for the explicit modeling of efferent and afferent sympathetic and parasympathetic pathways, thereby providing a more granular understanding of the physiological origins of HRV. Furthermore, rigorous validation across diverse clinical populations and a wider array of physiological challenges is crucial to establish the model's robustness and clinical utility. Comparative studies against state-of-the-art non-linear and machine learning approaches will also be essential to quantitatively demonstrate the enhanced insights provided by our mechanistic, interpretable framework. Ultimately, the development of software tools facilitating the broad adoption and application of this generative model will be paramount for its integration into mainstream HRV research and clinical practice.
